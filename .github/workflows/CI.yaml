name: CI

on:
  # GitHub has started calling new repo's first branch "main" https://github.com/github/renaming
  # Existing codes likely still have "master" as the primary branch
  # Both are tracked here to keep legacy and new codes working
  push:
    branches:
      - "main"
  pull_request:
    branches:
      - "main"
  schedule:
    # Nightly tests run on master by default:
    #   Scheduled workflows run on the latest commit on the default or base branch.
    #   (from https://help.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule)
    - cron: "0 9 * * MON"
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.cfg.os }}, Python ${{ matrix.cfg.python-version }}
    runs-on: ${{ matrix.cfg.os }}
    strategy:
      fail-fast: false  # do not cancel all in-progress jobs if any job variation fails
      matrix:
        #os: [macOS-latest, ubuntu-latest] # [macOS-latest, ubuntu-latest, windows-latest]
        #python-version: [3.7] # [3.7, 3.8, 3.9]
        cfg:
          - { os: ubuntu-latest, python-version: "3.7"}
          - { os: ubuntu-latest, python-version: "3.8"}
          - { os: ubuntu-latest, python-version: "3.9"}
            #- { os: ubuntu-latest, python-version: "3.10"}
          - { os: macos-latest,  python-version: "3.7"}
          - { os: macos-latest,  python-version: "3.8"}
          - { os: macos-latest,  python-version: "3.9"}
            #- { os: macos-latest,  python-version: "3.10"}
            #- { os: windows-latest,  python-version: "3.7"}
            #- { os: windows-latest,  python-version: "3.8"}
            #- { os: windows-latest,  python-version: "3.9"}
            #- { os: windows-latest,  python-version: "3.10"}

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0

    - name: Additional info about the build
      shell: bash
      run: |
        uname -a

    - name: Symlink gfortran (macOS)
      if: runner.os == 'macOS'
      run: |
        sudo ln -s /usr/local/bin/gfortran-10 /usr/local/bin/gfortran
        sudo mkdir /usr/local/gfortran
        sudo ln -s /usr/local/Cellar/gcc@10/*/lib/gcc/10 /usr/local/gfortran/lib
        gfortran --version

    #- name: Checking gfortran version
    #  run: |
    #    gfortran --version

    # More info on options: https://github.com/conda-incubator/setup-miniconda
    #- uses: conda-incubator/setup-miniconda@v2
    #  with:
    #    python-version: ${{ matrix.python-version }}
    #    environment-file: devtools/conda-envs/test_env.yaml
    #    #mamba-version: "*"
    #    #use-mamba: true
    #    channels: conda-forge,defaults

    #    activate-environment: test
    #    auto-update-conda: false
    #    auto-activate-base: false
    #    show-channel-urls: true

    - name: Setup conda env
      uses: mamba-org/provision-with-micromamba@main
      with:
        environment-file: devtools/conda-envs/test_env.yaml
        environment-name: test
        channels: uibcdf, conda-forge, ambermd, defaults

        extra-specs: |
          python==${{ matrix.cfg.python-version }}

    - name: Install package

      shell: bash -l {0}
      run: |
        python setup.py develop

    - name: Info conda
      shell: bash -l {0}
      run: |
        micromamba info
        micromamba list

    - name: Test import module
      shell: bash -l {0}
      run: |
        echo "::group::Importing module from home directory"
        cd
        pwd
        echo 'import molsysmt; print("Version of the package: {}".format(molsysmt.__version__))' | python
        echo "::endgroup::"

    - name: Run tests

      shell: bash -l {0}
      run: |
        pytest -v --cov=molsysmt --cov-report=xml --color=yes molsysmt/tests/

    - name: CodeCov
      uses: codecov/codecov-action@v1
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-${{ matrix.cfg.os }}-py${{ matrix.cfg.python-version }}
